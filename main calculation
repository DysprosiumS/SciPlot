import math
import numpy as np
import os
'''
Before run this script:
1. Set your experimental parameters in the head of this code (# Parameters...).
2. Create 5 empty txt files for calculations
3. Write a paths to data file and empty files on "Filenames..." part
'''

# Physical parameters and constants
particle_density = 1.5 #[g/cm^3] MF
coating_density = 8.92 #[g/cm^3] Cu

# Parameters of our experimental setup
fps = 14.62  # frames per 1 second
w = 0.5 #Coverage rate
Rp = 5 #Radius of uncoated particle, [mkm]
dc = 0.1 #Thickness of coating, [mkm]

#Filenames and filepaths
filename = 'C:/Users/17.3 Active Systems/Desktop/example1.txt'
displ_file = 'C:/Users/17.3 Active Systems/AppData/Roaming/JetBrains/PyCharmEdu2022.2/scratches/res1.txt'
vel_file = 'C:/Users/17.3 Active Systems/AppData/Roaming/JetBrains/PyCharmEdu2022.2/scratches/res2.txt'
acc_file = 'C:/Users/17.3 Active Systems/AppData/Roaming/JetBrains/PyCharmEdu2022.2/scratches/res3.txt'
mean_file = 'C:/Users/17.3 Active Systems/AppData/Roaming/JetBrains/PyCharmEdu2022.2/scratches/stat.txt'

# Calculation of particle parameters
Volume_particle = 4/3*math.pi*Rp**3 #[mkm^3]
Volume_coating = 4/3*w*math.pi*((Rp+dc)**3-Rp**3)#[mkm^3]
Volume_particle /= 10**12 #[cm^3]
Volume_coating /= 10**12 #[cm^3]
Mass = particle_density*Volume_particle + coating_density*Volume_coating #[g]
Mass /= 1000 #[kg]

points = []

# Read coordinates from the text file
with open(filename, 'r') as file:
    for line in file:
        coordinates = line.strip().split() #Split our file for every line. Add these lines in array of coordinates
        points.append(float(coordinates[0]))

# Calculating displacements
def calculate_displacement(x1, x2):
    return abs(x2 - x1)


def calculate_displacements(points):
    displacements = []
    for i in range(len(points) - 1):
        x1 = points[i]
        x2 = points[i + 1]
        displacement = calculate_displacement(x1, x2)
        displacements.append(displacement)
    return displacements  # in pixels without transition


# Calculate displacements between neighboring points
displacements = calculate_displacements(points)

# Print the displacements
with open(filename, 'a') as result_file1:
    for i, displacement in enumerate(displacements):
        print(f"Displacement between point {i + 1} and point {i + 2}: {displacement}")

# Create a file with displacements
with open(displ_file, 'w') as result_file1:
    for displacement in displacements:
        result_file1.write(''.join(str(displacement)))
        result_file1.write('\n')
result_file1.close()

# Calculate velocities
def calculate_velocity (displacement):
    return displacement*fps

def calculate_velocities (displacements):
    velocities = []
    for i in range(len(displacements) - 1):
        displacement = displacements[i]
        velocity = calculate_velocity(displacement)
        velocities.append(velocity)
    return velocities

velocities = calculate_velocities(displacements)
mean_velocity = np.mean(velocities)

# Print the velocities
for velocity in velocities:
        print(f"Velocity: {velocity}")

# Create a file with velocities
with open(vel_file, 'w') as result_file2:
    for velocity in velocities:
        result_file2.write(''.join(str(velocity)))
        result_file2.write('\n')
result_file2.close()

#Calculate accelerations
def calculate_acceleration (velocity1, velocity2):
    acceleration = abs(velocity2 - velocity1)*fps
    return acceleration

def calculate_accelerations (velocities):
    accelerations = []
    for i in range(len(velocities) - 1):
        velocity1 = velocities[i]
        velocity2 = velocities[i+1]
        acceleration = calculate_acceleration(velocity1, velocity2)
        accelerations = [*accelerations, acceleration]

    return accelerations


accelerations = calculate_accelerations(velocities)
mean_acceleration = np.mean(accelerations)

#Print accelerations
for acceleration in accelerations:
    print(f"Acceleration: {acceleration}")

# Create a file with accelerations
with open(acc_file, 'w') as result_file3:
    for acceleration in accelerations:
        result_file3.write(''.join(str(acceleration)))
        result_file3.write('\n')
result_file3.close()

#Calculate kinetic energies
def calculate_kin_en (velocity):
    kin_en = 0.5*Mass*(velocity)**2
    return kin_en

def calculate_kin_ens(velocities):
    kin_ens = []
    for i in range(len(velocities)):
        velocity = velocities[i]
        kin_en = calculate_kin_en(velocity)
        kin_ens = [*kin_ens, kin_en]
    return kin_ens

kin_ens = calculate_kin_ens(velocities)

#Print kinetic energies
for energy in kin_ens:
    print(f"Kinetic energy: {energy}")

# Create a file with kinetic energies
with open(kin_en_file, 'w') as result_file4:
    for energy in kin_ens:
        result_file4.write(''.join(str(energy)))
        result_file4.write('\n')
result_file4.close()#Calculate kinetic energies
def calculate_kin_en (velocity):
    kin_en = 0.5*Mass*(velocity)**2
    return kin_en

def calculate_kin_ens(velocities):
    kin_ens = []
    for i in range(len(velocities)):
        velocity = velocities[i]
        kin_en = calculate_kin_en(velocity)
        kin_ens = [*kin_ens, kin_en]
    return kin_ens

kin_ens = calculate_kin_ens(velocities)
mean_kin_energy = np.mean(kin_ens)

#Print kinetic energies
for energy in kin_ens:
    print(f"Kinetic energy: {energy}")

# Create a file with kinetic energies
with open(kin_en_file, 'w') as result_file4:
    for energy in kin_ens:
        result_file4.write(''.join(str(energy)))
        result_file4.write('\n')
result_file4.close()

#Create a file with mean parameters
with open(mean_file, 'w') as stat_file:
    stat_file.write("Mean velocity: " + str(mean_velocity))
    stat_file.write('\n')
    stat_file.write("Mean acceleration: " + str(mean_acceleration))
    stat_file.write('\n')
    stat_file.write("Mean kinetic energy: " + str(mean_kin_energy))
    stat_file.write('\n')
stat_file.close()
