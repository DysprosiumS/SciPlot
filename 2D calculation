import pandas as pd
import numpy as np
import math

# Physical parameters and constants
particle_density = 1.5 #[g/cm^3] MF
coating_density = 8.92 #[g/cm^3] Cu

# Parameters of our experimental setup
fps = 350# Frames per 1 second
Scale = 13.4# Scale of our recording, [mkm/px]
w = 1 #Coverage rate
Diameter = 5 #Diameter of uncoated particle, [mkm]
dc = 0.15 #Thickness of coating, [mkm]

# Calculation of particle parameters
Rp = Diameter/2
Volume_particle = 4/3*math.pi*Rp**3 #[mkm^3]
Volume_coating = 4/3*w*math.pi*((Rp+dc)**3-Rp**3)#[mkm^3]
Volume_particle /= 10**12 #[cm^3]
Volume_coating /= 10**12 #[cm^3]
Mass = particle_density*Volume_particle + coating_density*Volume_coating #[g]
Mass /= 1000 #[kg]

# Save particle parameters
exp_set = pd.DataFrame(data=0, index=range(8), columns=range(1), dtype=np.float64)
exp_set.iat[0,0] = 'Масса частицы, кг'
exp_set.iat[1,0] = Mass
exp_set.iat[2,0] = 'Объём частицы, м^3'
exp_set.iat[3,0] = Volume_particle/10**6
exp_set.iat[4,0] = 'Объём покрытия, м^3'
exp_set.iat[5,0] = Volume_coating/10**6
exp_set.iat[6,0] = 'Объём частицы с покрытием, м^3'
exp_set.iat[7,0] = (Volume_coating + Volume_coating)/10**6

# Read txt files and save raw data to xlsx tables
coordsx = pd.read_csv(filepath_or_buffer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/X1000.txt', sep='\t',
                      header=None, float_precision=None)
coordsx.dropna(axis=1, inplace=True)
coordsx.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/coordX.xlsx', sheet_name='Sheet1',
                 index=False, header=False, float_format='%.6f')
coordsy = pd.read_csv(filepath_or_buffer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/Y1000.txt', sep='\t',
                      header=None)
coordsy.dropna(axis=1, inplace=True)
coordsy.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/coordY.xlsx', sheet_name='Sheet1',
                 index=False, header=False, float_format='%.6f')

# number of particles
colx = len(coordsx.columns)
# number of frames
indx = len(coordsx.index)

'''
Code part to calculate displacements
'''
# Calculating displacements
def calculate_displacement(coords):
    displ = pd.DataFrame(data=0, index=np.arange(indx-1), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 1):
            x1 = coords.iat[i, j]
            x2 = coords.iat[i+1, j]
            displ.iat[i, j] = (x2 - x1)*Scale
            displ.iat[i, j] =displ.iat[i, j].round(7)
    return displ # in [mkm]

# Calculate mean displacement of 2 axes (X and Y)
def calculate_displacement_2D(displx, disply):
    displ_2D = pd.DataFrame(data=0, index=np.arange(indx - 1), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 1):
            displ_x = displx.iat[i, j]
            displ_y = disply.iat[i, j]
            displ_2D.iat[i, j] = math.sqrt(displ_x**2 + displ_y**2)
            displ_2D.iat[i, j] =displ_2D.iat[i, j].round(7)
    return displ_2D

# Calculate displacements between neighboring points on X
displx = calculate_displacement(coordsx)
# Calculate displacements between neighboring points on Y
disply = calculate_displacement(coordsy)

# Save displacement for both axes
displx.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/displacementX.xlsx',
                sheet_name='Sheet1', index=False, header=False)
disply.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/displacementY.xlsx',
                sheet_name='Sheet1', index=False, header=False)

# Save displacement for 2D
displ_2D = calculate_displacement_2D(displx,disply)
displ_2D.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/displ_2D.xlsx',
                  sheet_name='Sheet1', index=False, header=False)

#Mean displacement for every particle
mean_displ = displ_2D.mean()

'''
Code part to calculate velocities
'''
# Calculating velocities
def calculate_velocity(displacements):
    velocities = pd.DataFrame(data=0, index=np.arange(indx-1), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 1):
            displacement = displacements.iat[i, j]
            velocities.iat[i, j] = displacement * fps
            velocities.iat[i, j].round(8)
    return velocities # in [mkm/s]

# Calculate mean velocity of 2 axes (X and Y)
def calculate_velocity_2D(velx, vely):
    vel_2D = pd.DataFrame(data=0, index=np.arange(indx - 1), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 1):
            vel_x = velx.iat[i, j]
            vel_y = vely.iat[i, j]
            vel_2D.iat[i, j] = math.sqrt(vel_x**2 + vel_y**2)
            vel_2D.iat[i, j] = vel_2D.iat[i, j].round(8)
    return vel_2D

velx = calculate_velocity(displx)
vely = calculate_velocity(disply)
vel_2D = calculate_velocity_2D(velx, vely)

#Save velocities
velx.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/velocityX.xlsx',
                sheet_name='Sheet1', index=False, header=False)
vely.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/velocityY.xlsx',
                sheet_name='Sheet1', index=False, header=False)
vel_2D.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/vel_2D.xlsx',
                  sheet_name='Sheet1', index=False, header=False)

#Mean velocity for every particle
mean_vel = vel_2D.mean()

'''
Code part to calculate accelerations
'''
def calculate_acceleration(velocities):
    accelerations = pd.DataFrame(data=0, index=np.arange(indx-2), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 2):
            velocity1 = velocities.iat[i, j]
            velocity2 = velocities.iat[i+1, j]
            accelerations.iat[i, j] = abs(velocity2-velocity1) * fps
            accelerations.iat[i, j].round(9)
    return accelerations # in [mkm/s^2]

def calculate_acceleration_2D(accx, accy):
    acc_2D = pd.DataFrame(data=0, index=np.arange(indx - 2), columns=np.arange(colx), dtype=np.float64)
    for j in range(colx):
        for i in range(indx - 2):
            acc_x = accx.iat[i, j]
            acc_y = accy.iat[i, j]
            acc_2D.iat[i, j] = math.sqrt(acc_x**2 + acc_y**2)
            acc_2D.iat[i, j] = acc_2D.iat[i, j].round(9)
    return acc_2D

accx = calculate_acceleration(velx)
accy = calculate_acceleration(vely)
acc_2D = calculate_acceleration_2D(accx, accy)

#Save accelerations
accx.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/accelerationX.xlsx',
                sheet_name='Sheet1', index=False, header=False)
accy.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/accelerationY.xlsx',
                sheet_name='Sheet1', index=False, header=False)
acc_2D.to_excel(excel_writer='C:/Users/17.3 Active Systems/Desktop/calculation/2D/acc_2D.xlsx',
                  sheet_name='Sheet1', index=False, header=False)

#Mean acceleration for every particle
mean_acc = acc_2D.mean()

'''
Code part to calculate kinetic energies. 
'''
def calculate_kin_en(velocities, dimension):
    kin_ens_J = pd.DataFrame(data=0, index=np.arange(indx-1), columns=np.arange(colx), dtype=np.float64)
    kin_ens_eV = pd.DataFrame(data=0, index=np.arange(indx-1), columns=np.arange(colx), dtype=np.float64)
    if dimension == 1:
       for j in range(colx):
         for i in range(indx - 1):
            velocity = velocities.iat[i, j]
            kin_ens_J.iat[i, j] = 0.5 * Mass * (velocity**2)/10**12  # in [J]
            kin_ens_J.iat[i, j].round(9)
       return kin_ens_J # in [J]
    if dimension == 2:
       for j in range(colx):
         for i in range(indx - 1):
            velocity = velocities.iat[i, j]
            kin_ens_eV.iat[i, j] = 0.5 * Mass * (velocity**2)*(10**7)/1.6  # in [eV]
            kin_ens_eV.iat[i, j].round(9)
       return kin_ens_eV # in [eV]

kin_ens_J = calculate_kin_en(vel_2D, 1)
kin_ens_eV = calculate_kin_en(vel_2D, 2)

#Save energies
with pd.ExcelWriter('C:/Users/Senos/OneDrive/Рабочий стол/расчеты вихри через прогу/до вихрей/kin_ens.xlsx') as writer:
     kin_ens_J.to_excel(writer, sheet_name='Kin en J', index=False, header=False)
     kin_ens_eV.to_excel(writer,sheet_name='Kin en eV', index=False, header=False)

#Mean kinetic energy for every particle
mean_kin_en_J = kin_ens_J.mean()
mean_kin_en_eV = kin_ens_eV.mean()

'''
Code part to calculate work of forces. 
'''
def calculate_work(accelerations, displacements, dimension):
    works_J = pd.DataFrame(data=0, index=np.arange(indx-2), columns=np.arange(colx), dtype=np.float64)
    works_eV = pd.DataFrame(data=0, index=np.arange(indx-2), columns=np.arange(colx), dtype=np.float64)
    if dimension == 1:
       for j in range(colx):
         for i in range(indx - 1):
            acceleration = accelerations.iat[i, j]
            displacement = displacements.iat[i, j]
            works_J.iat[i, j] = Mass * acceleration * displacement/10**12  # in [J]
            works_J.iat[i, j].round(9)
       return works_J # in [J]
    if dimension == 2:
       for j in range(colx):
         for i in range(indx - 1):
            acceleration = accelerations.iat[i, j]
            displacement = displacements.iat[i, j]
            works_eV.iat[i, j] = Mass * acceleration * displacement*(10**7)/1.6  # in [eV]
            works_eV.iat[i, j].round(9)
       return works_eV # in [eV]

works_fors_J = calculate_work(acc_2D, displ_2D, 1)
works_fors_eV = calculate_work(acc_2D, displ_2D, 2)

#Save works of forces
with pd.ExcelWriter('C:/Users/17.3 Active Systems/Desktop/calculation/2D/mal.xlsx') as writer:
    works_fors_J.to_excel(writer, sheet_name='Work J', index=False, header=False)
    works_fors_eV.to_excel(writer, sheet_name='Work eV', index=False, header=False)

#Mean work of forces for every particle
mean_work_J = works_fors_J.mean()
mean_work_eV = works_fors_eV.mean()

'''
Code part to create a file with mean parameters & experimental setup
'''
#Save mean values
with pd.ExcelWriter('C:/Users/17.3 Active Systems/Desktop/calculation/2D/mean.xlsx') as writer:
    exp_set.to_excel(writer, sheet_name='Exp Setup', index=False, header=False)
    mean_displ.to_excel(writer, sheet_name='Displ', index=False, header=False)
    mean_vel.to_excel(writer, sheet_name='Vel', index=False, header=False)
    mean_acc.to_excel(writer, sheet_name='Accel', index=False, header=False)
    mean_kin_en_J.to_excel(writer, sheet_name='Kin en J', index=False, header=False)
    mean_kin_en_eV.to_excel(writer, sheet_name='Kin en eV', index=False, header=False)
    mean_work_J.to_excel(writer, sheet_name='Work J', index=False, header=False)
    mean_work_eV.to_excel(writer, sheet_name='Work eV', index=False, header=False)
